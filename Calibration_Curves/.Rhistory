}
}
# Gas3 model (handle NAs)
if (all(!is.na(data$Std_Gas3_PPM)) && all(!is.na(data$Std_Gas3_Peak))) {
Gas3model <- lm(formula = Std_Gas3_PPM ~ Std_Gas3_Peak, data = data)
results$Gas3$c <- Gas3model$coefficients[1]
results$Gas3$m <- Gas3model$coefficients[2]
results$Gas3$r2 <- summary(Gas3model)$r.squared
if (results$Gas3$r2 < r_square_threshold) {
alerts <- c(alerts, paste("Warning: Gas3 R² (", round(results$Gas3$r2, 2), ") is below", r_square_threshold))
}
}
# If there are any alerts, print them
if (length(alerts) > 0) {
cat(paste(alerts, collapse = "\n"), "\n")
}
# Convert results to a dataframe
calibration_curve_results <- data.frame(
Gas = c("CH4", "CO2", "N2O", "Gas1", "Gas2", "Gas3"),
Intercept = sapply(results, function(x) x$c),
Slope = sapply(results, function(x) x$m),
R_Squared = sapply(results, function(x) x$r2)
)
return(calibration_curve_results)
}
# Step 4: Calculate ppm concentrations for samples using calibration curve (ppm = m * peak + c)
conc_calculator <- function(m, x, c) {
m * x + c
}
# Main function to process the data
peak2ppm <- function(standard_data, sample_data, r_square_threshold = 0.9) {
# Step 1: Split standard data by GC_Run
split_data <- split_by_GC_Run(standard_data)
# Step 2 & 3: For each GC_Run, perform the calibration and calculate ppm for the sample_data
results <- lapply(split_data, function(gc_run_data) {
# Perform calibration for this GC_Run
calibration_results <- calibration_curves(gc_run_data, r_square_threshold)
# Filter sample_data for this GC_Run
matching_samples <- sample_data[sample_data$GC_Run == unique(gc_run_data$GC_Run), ]
# Calculate CH4, CO2, N2O, and Gas 1, 2, and 3 concentrations using the calibration curves
matching_samples$Sample_CH4_ppm <- conc_calculator(calibration_results$Slope[calibration_results$Gas == "CH4"], matching_samples$Sample_CH4_Peak, calibration_results$Intercept[calibration_results$Gas == "CH4"])
matching_samples$Sample_CO2_ppm <- conc_calculator(calibration_results$Slope[calibration_results$Gas == "CO2"], matching_samples$Sample_CO2_Peak, calibration_results$Intercept[calibration_results$Gas == "CO2"])
matching_samples$Sample_N2O_ppm <- conc_calculator(calibration_results$Slope[calibration_results$Gas == "N2O"], matching_samples$Sample_N2O_Peak, calibration_results$Intercept[calibration_results$Gas == "N2O"])
matching_samples$Sample_Gas1_ppm <- conc_calculator(calibration_results$Slope[calibration_results$Gas == "Gas1"], matching_samples$Sample_Gas1_Peak, calibration_results$Intercept[calibration_results$Gas == "Gas1"])
matching_samples$Sample_Gas2_ppm <- conc_calculator(calibration_results$Slope[calibration_results$Gas == "Gas2"], matching_samples$Sample_Gas2_Peak, calibration_results$Intercept[calibration_results$Gas == "Gas2"])
matching_samples$Sample_Gas3_ppm <- conc_calculator(calibration_results$Slope[calibration_results$Gas == "Gas3"], matching_samples$Sample_Gas3_Peak, calibration_results$Intercept[calibration_results$Gas == "Gas3"])
# Return the updated sample data with calculated concentrations
return(matching_samples)
})
# Step 1: Split the dataframe by GC_Run
split_by_GC_Run <- function(data) {
split(data, data$GC_Run)
}
# Step 2 & 3: Perform linear regression for each gas and extract m, c, and r² with R² alert
calibration_curves <- function(data, r_square_threshold = 0.9) {
# Initialize an empty list to store results
results <- list(
CH4 = list(c = NA, m = NA, r2 = NA),
CO2 = list(c = NA, m = NA, r2 = NA),
N2O = list(c = NA, m = NA, r2 = NA),
Gas1 = list(c = NA, m = NA, r2 = NA),
Gas2 = list(c = NA, m = NA, r2 = NA),
Gas3 = list(c = NA, m = NA, r2 = NA)
)
alerts <- list()  # To store alerts about low R² values
# CH4 model (handle NAs)
if (all(!is.na(data$Std_CH4_PPM)) && all(!is.na(data$Std_CH4_Peak))) {
CH4model <- lm(formula = Std_CH4_PPM ~ Std_CH4_Peak, data = data)
results$CH4$c <- CH4model$coefficients[1]
results$CH4$m <- CH4model$coefficients[2]
results$CH4$r2 <- summary(CH4model)$r.squared
if (results$CH4$r2 < r_square_threshold) {
alerts <- c(alerts, paste("Warning: CH4 R² (", round(results$CH4$r2, 2), ") is below", r_square_threshold))
}
}
# CO2 model (handle NAs)
if (all(!is.na(data$Std_CO2_PPM)) && all(!is.na(data$Std_CO2_Peak))) {
CO2model <- lm(formula = Std_CO2_PPM ~ Std_CO2_Peak, data = data)
results$CO2$c <- CO2model$coefficients[1]
results$CO2$m <- CO2model$coefficients[2]
results$CO2$r2 <- summary(CO2model)$r.squared
if (results$CO2$r2 < r_square_threshold) {
alerts <- c(alerts, paste("Warning: CO2 R² (", round(results$CO2$r2, 2), ") is below", r_square_threshold))
}
}
# N2O model (handle NAs)
if (all(!is.na(data$Std_N2O_PPM)) && all(!is.na(data$Std_N2O_Peak))) {
N2Omodel <- lm(formula = Std_N2O_PPM ~ Std_N2O_Peak, data = data)
results$N2O$c <- N2Omodel$coefficients[1]
results$N2O$m <- N2Omodel$coefficients[2]
results$N2O$r2 <- summary(N2Omodel)$r.squared
if (results$N2O$r2 < r_square_threshold) {
alerts <- c(alerts, paste("Warning: N2O R² (", round(results$N2O$r2, 2), ") is below", r_square_threshold))
}
}
# Gas1 model (handle NAs)
if (all(!is.na(data$Std_Gas1_PPM)) && all(!is.na(data$Std_Gas1_Peak))) {
Gas1model <- lm(formula = Std_Gas1_PPM ~ Std_Gas1_Peak, data = data)
results$Gas1$c <- Gas1model$coefficients[1]
results$Gas1$m <- Gas1model$coefficients[2]
results$Gas1$r2 <- summary(Gas1model)$r.squared
if (results$Gas1$r2 < r_square_threshold) {
alerts <- c(alerts, paste("Warning: Gas1 R² (", round(results$Gas1$r2, 2), ") is below", r_square_threshold))
}
}
# Gas2 model (handle NAs)
if (all(!is.na(data$Std_Gas2_PPM)) && all(!is.na(data$Std_Gas2_Peak))) {
Gas2model <- lm(formula = Std_Gas2_PPM ~ Std_Gas2_Peak, data = data)
results$Gas2$c <- Gas2model$coefficients[1]
results$Gas2$m <- Gas2model$coefficients[2]
results$Gas2$r2 <- summary(Gas2model)$r.squared
if (results$Gas2$r2 < r_square_threshold) {
alerts <- c(alerts, paste("Warning: Gas2 R² (", round(results$Gas2$r2, 2), ") is below", r_square_threshold))
}
}
# Gas3 model (handle NAs)
if (all(!is.na(data$Std_Gas3_PPM)) && all(!is.na(data$Std_Gas3_Peak))) {
Gas3model <- lm(formula = Std_Gas3_PPM ~ Std_Gas3_Peak, data = data)
results$Gas3$c <- Gas3model$coefficients[1]
results$Gas3$m <- Gas3model$coefficients[2]
results$Gas3$r2 <- summary(Gas3model)$r.squared
if (results$Gas3$r2 < r_square_threshold) {
alerts <- c(alerts, paste("Warning: Gas3 R² (", round(results$Gas3$r2, 2), ") is below", r_square_threshold))
}
}
# If there are any alerts, print them
if (length(alerts) > 0) {
cat(paste(alerts, collapse = "\n"), "\n")
}
# Convert results to a dataframe
calibration_curve_results <- data.frame(
Gas = c("CH4", "CO2", "N2O", "Gas1", "Gas2", "Gas3"),
Intercept = sapply(results, function(x) x$c),
Slope = sapply(results, function(x) x$m),
R_Squared = sapply(results, function(x) x$r2)
)
return(calibration_curve_results)
}
# Step 4: Calculate ppm concentrations for samples using calibration curve (ppm = m * peak + c)
conc_calculator <- function(m, x, c) {
m * x + c
}
# Main function to process the data
peak2ppm <- function(standard_data, sample_data, r_square_threshold = 0.9) {
# Step 1: Split standard data by GC_Run
split_data <- split_by_GC_Run(standard_data)
# Step 2 & 3: For each GC_Run, perform the calibration and calculate ppm for the sample_data
results <- lapply(split_data, function(gc_run_data) {
# Perform calibration for this GC_Run
calibration_results <- calibration_curves(gc_run_data, r_square_threshold)
# Filter sample_data for this GC_Run
matching_samples <- sample_data[sample_data$GC_Run == unique(gc_run_data$GC_Run), ]
# Calculate CH4, CO2, N2O, and Gas 1, 2, and 3 concentrations using the calibration curves
matching_samples$Sample_CH4_ppm <- conc_calculator(calibration_results$Slope[calibration_results$Gas == "CH4"], matching_samples$Sample_CH4_Peak, calibration_results$Intercept[calibration_results$Gas == "CH4"])
matching_samples$Sample_CO2_ppm <- conc_calculator(calibration_results$Slope[calibration_results$Gas == "CO2"], matching_samples$Sample_CO2_Peak, calibration_results$Intercept[calibration_results$Gas == "CO2"])
matching_samples$Sample_N2O_ppm <- conc_calculator(calibration_results$Slope[calibration_results$Gas == "N2O"], matching_samples$Sample_N2O_Peak, calibration_results$Intercept[calibration_results$Gas == "N2O"])
matching_samples$Sample_Gas1_ppm <- conc_calculator(calibration_results$Slope[calibration_results$Gas == "Gas1"], matching_samples$Sample_Gas1_Peak, calibration_results$Intercept[calibration_results$Gas == "Gas1"])
matching_samples$Sample_Gas2_ppm <- conc_calculator(calibration_results$Slope[calibration_results$Gas == "Gas2"], matching_samples$Sample_Gas2_Peak, calibration_results$Intercept[calibration_results$Gas == "Gas2"])
matching_samples$Sample_Gas3_ppm <- conc_calculator(calibration_results$Slope[calibration_results$Gas == "Gas3"], matching_samples$Sample_Gas3_Peak, calibration_results$Intercept[calibration_results$Gas == "Gas3"])
# Return the updated sample data with calculated concentrations
return(matching_samples)
})
# Combine results into a single dataframe
combined_results <- do.call(rbind, results)
return(combined_results)
}
final_data <- peak2ppm(std, samples)
library(readxl)
library(writexl)
std <- read_excel("D:/Academics/UC Davis/School Work/Linquist Lab/Data/R stats/GHG and MAOM POM/Calibration_Curves/Std_Input_Zhang.xlsx", sheet = 1)
samples <- read_excel("D:/Academics/UC Davis/School Work/Linquist Lab/Data/R stats/GHG and MAOM POM/Calibration_Curves/AllFieldMeasurementsWrangled_Allrevised_Jerry_Zhang_DoNotEdit.xlsx", sheet = 1)
final_data <- peak2ppm(std, samples)
View(final_data)
View(final_data)
library(knitr)
library(ggplot2)
theme_set(theme_bw())
library(emmeans)
library(multcomp)
library(PLS205)
library(lme4)
library(lmerTest)
library(multcompView)
library(car)
library(Rmisc)
library(dplyr) #https://r4ds.had.co.nz/ (Chapter 3, Chapter 5, look at filter and select)
# https://bookdown.org/ansellbr/WEHI_tidyR_course_book/
library(stringr)
library(data.table)
library(GGally)
library(formatR)
library(readxl)
library(openxlsx)
library(Peak2PPM)
std <- read_excel("D:/Academics/UC Davis/School Work/Linquist Lab/Data/R stats/GHG and MAOM POM/Calibration_Curves/Std_Input_Zhang.xlsx", sheet = 1)
samples <- read_excel("D:/Academics/UC Davis/School Work/Linquist Lab/Data/R stats/GHG and MAOM POM/Calibration_Curves/AllFieldMeasurementsWrangled_Allrevised_Jerry_Zhang_DoNotEdit.xlsx", sheet = 1)
str(samples)
str(std)
table(samples$GC_Run)
table(std$GC_Run)
final_data <- peak2ppm(std, samples)
str(final_data)
final_data <- final_data %>% select(-Sample_Gas3_ppm)
str(final_data)
final_data <- final_data %>%
select(-Sample_Gas3_ppm, -Sample_Gas3_Peak, -Sample_Gas2_ppm, -Sample_Gas2_Peak,-Sample_Gas1_ppm, -Sample_Gas1_Peak, -Sample_CO2_ppm, -Sample_CO2_Peak,)
final_data <- peak2ppm(std, samples)
final_data <- final_data %>%
select(-Sample_Gas3_ppm, -Sample_Gas3_Peak, -Sample_Gas2_ppm, -Sample_Gas2_Peak,-Sample_Gas1_ppm, -Sample_Gas1_Peak, -Sample_CO2_ppm, -Sample_CO2_Peak,)
str(final_data)
library(knitr)
library(ggplot2)
theme_set(theme_bw())
library(emmeans)
library(multcomp)
library(PLS205)
library(lme4)
library(lmerTest)
library(multcompView)
library(car)
library(Rmisc)
library(dplyr) #https://r4ds.had.co.nz/ (Chapter 3, Chapter 5, look at filter and select)
# https://bookdown.org/ansellbr/WEHI_tidyR_course_book/
library(stringr)
library(data.table)
library(GGally)
library(formatR)
library(readxl)
library(openxlsx)
library(Peak2PPM)
library(knitr)
library(ggplot2)
theme_set(theme_bw())
library(emmeans)
library(multcomp)
library(PLS205)
library(lme4)
library(lmerTest)
library(multcompView)
library(car)
library(Rmisc)
library(dplyr) #https://r4ds.had.co.nz/ (Chapter 3, Chapter 5, look at filter and select)
# https://bookdown.org/ansellbr/WEHI_tidyR_course_book/
library(stringr)
library(data.table)
library(GGally)
library(formatR)
library(readxl)
library(openxlsx)
library(Peak2PPM)
final_data <- read_excel("D:/Academics/UC Davis/School Work/Linquist Lab/Data/R stats/GHG and MAOM POM/Calibration_Curves/AllFieldMeasurementsWrangled_Allrevised_Jerry_Zhang_DoNotEdit.xlsx", sheet = 1)
final_data$Date <- as.POSIXct(final_data$Date)
final_data_2021 <- final_data %>%
filter(year(Date) == 2021)
final_data_2022 <- final_data %>%
filter(year(Date) == 2022)
#this is becuase the plots coming out of winter are in a different sequence than those going into summer
split_date <- as.Date("2022-05-13")
before_11_may_2022 <- final_data_2022 %>% filter(Date < split_date)
after_11_may_2022 <- final_data_2022 %>% filter(Date > split_date)
final_data_2023 <-final_data %>%
filter(year(Date) == 2023)
final_data_2021 <- final_data_2021 %>%
arrange(Date, match(Plot, c("106", "107","204","209","302","307","402","505","601"))) %>%
#mutate(Date = format(as.Date(Date), "%d-%m-%Y")) %>%
mutate(Date = as.character(Date))
before_11_may_2022 <- before_11_may_2022 %>%
arrange(Date, match(Plot, c("106", "107","204","209","302","307","402","505","601"))) %>%
#mutate(Date = format(as.Date(Date), "%d-%m-%Y")) %>%
mutate(Date = as.character(Date))
after_11_may_2022 <- after_11_may_2022 %>%
arrange(Date, match(Plot, c("402", "409", "505", "512", "601", "608","209","307","K1"))) %>%
#mutate(Date = format(as.Date(Date), "%d-%m-%Y")) %>%
mutate(Date = as.character(Date))
final_data_2023 <- final_data_2023 %>%
arrange(Date, match(Plot, c("701", "711", "805", "812", "903", "909"))) %>%
#mutate(Date = format(as.Date(Date), "%d-%m-%Y")) %>%
mutate(Date = as.character(Date))
final_data_rearranged <- rbind(final_data_2021, before_11_may_2022, after_11_may_2022, final_data_2023)
write.xlsx(final_data_rearranged, file = "AllFieldMeasurementsWrangled_Allrevised_Jerry_Zhang_DoNotEdit.xlsx", sheetName = "Yay_Hopefully", rowNames = FALSE)
library(knitr)
library(ggplot2)
theme_set(theme_bw())
library(emmeans)
library(multcomp)
library(PLS205)
library(lme4)
library(lmerTest)
library(multcompView)
library(car)
library(Rmisc)
library(dplyr) #https://r4ds.had.co.nz/ (Chapter 3, Chapter 5, look at filter and select)
# https://bookdown.org/ansellbr/WEHI_tidyR_course_book/
library(stringr)
library(data.table)
library(GGally)
library(formatR)
library(readxl)
library(lubridate)
library(openxlsx)
library(Peak2PPM)
std <- read_excel("D:/Academics/UC Davis/School Work/Linquist Lab/Data/R stats/GHG and MAOM POM/Calibration_Curves/Std_Input_Zhang.xlsx", sheet = 1)
View(`*tmp*`)
std <- read_excel("D:/Academics/UC Davis/School Work/Linquist Lab/Data/R stats/GHG and MAOM POM/Calibration_Curves/Std_Input_Zhang.xlsx", sheet = 1)
library(knitr)
library(ggplot2)
theme_set(theme_bw())
library(emmeans)
library(multcomp)
library(PLS205)
library(lme4)
library(lmerTest)
library(multcompView)
library(car)
library(Rmisc)
library(dplyr) #https://r4ds.had.co.nz/ (Chapter 3, Chapter 5, look at filter and select)
# https://bookdown.org/ansellbr/WEHI_tidyR_course_book/
library(stringr)
library(data.table)
library(GGally)
library(formatR)
library(readxl)
library(lubridate)
library(openxlsx)
library(Peak2PPM)
std <- read_excel("D:/Academics/UC Davis/School Work/Linquist Lab/Data/R stats/GHG and MAOM POM/Calibration_Curves/Std_Input_Zhang.xlsx", sheet = 1)
samples <- read_excel("D:/Academics/UC Davis/School Work/Linquist Lab/Data/R stats/GHG and MAOM POM/Calibration_Curves/AllFieldMeasurementsWrangled_Allrevised_Jerry_Zhang_DoNotEdit.xlsx", sheet = 1)
final_data <- final_data %>%
select(-Sample_Gas3_ppm,
-Sample_Gas3_Peak,
-Sample_Gas2_ppm,
-Sample_Gas2_Peak,
-Sample_Gas1_ppm,
-Sample_Gas1_Peak,
-Sample_CO2_ppm,
-Sample_CO2_Peak,
#-Peak_Area_CH4,
#-Peak_Area_N2O,
#-Conc_PPM_CH4,
#-Conc_PPM_N2O)
library(knitr)
library(ggplot2)
theme_set(theme_bw())
library(emmeans)
library(multcomp)
library(PLS205)
library(lme4)
library(lmerTest)
library(multcompView)
library(car)
library(Rmisc)
library(dplyr) #https://r4ds.had.co.nz/ (Chapter 3, Chapter 5, look at filter and select)
# https://bookdown.org/ansellbr/WEHI_tidyR_course_book/
library(stringr)
library(data.table)
library(GGally)
library(formatR)
library(readxl)
library(lubridate)
library(openxlsx)
library(Peak2PPM)
std <- read_excel("D:/Academics/UC Davis/School Work/Linquist Lab/Data/R stats/GHG and MAOM POM/Calibration_Curves/Std_Input_Zhang.xlsx", sheet = 1)
samples <- read_excel("D:/Academics/UC Davis/School Work/Linquist Lab/Data/R stats/GHG and MAOM POM/Calibration_Curves/AllFieldMeasurementsWrangled_Allrevised_Jerry_Zhang_DoNotEdit.xlsx", sheet = 1)
str(samples)
str(std)
table(samples$GC_Run)
table(std$GC_Run)
final_data <- peak2ppm(std, samples)
str(final_data)
final_data <- final_data %>%
select(-Sample_Gas3_ppm,
-Sample_Gas3_Peak,
-Sample_Gas2_ppm,
-Sample_Gas2_Peak,
-Sample_Gas1_ppm,
-Sample_Gas1_Peak,
-Sample_CO2_ppm,
-Sample_CO2_Peak)
#-Peak_Area_CH4,
#-Peak_Area_N2O,
#-Conc_PPM_CH4,
#-Conc_PPM_N2O)
final_data$Date <- as.POSIXct(final_data$Date)
final_data_2021 <- final_data %>%
filter(year(Date) == 2021)
final_data_2022 <- final_data %>%
filter(year(Date) == 2022)
#this is becuase the plots coming out of winter are in a different sequence than those going into summer
split_date <- as.Date("2022-05-13")
before_11_may_2022 <- final_data_2022 %>% filter(Date < split_date)
after_11_may_2022 <- final_data_2022 %>% filter(Date > split_date)
final_data_2023 <-final_data %>%
filter(year(Date) == 2023)
final_data_2021 <- final_data_2021 %>%
arrange(Date, match(Plot, c("106", "107","204","209","302","307","402","505","601"))) %>%
#mutate(Date = format(as.Date(Date), "%d-%m-%Y")) %>%
mutate(Date = as.character(Date))
before_11_may_2022 <- before_11_may_2022 %>%
arrange(Date, match(Plot, c("106", "107","204","209","302","307","402","505","601"))) %>%
#mutate(Date = format(as.Date(Date), "%d-%m-%Y")) %>%
mutate(Date = as.character(Date))
after_11_may_2022 <- after_11_may_2022 %>%
arrange(Date, match(Plot, c("402", "409", "505", "512", "601", "608","209","307","K1"))) %>%
#mutate(Date = format(as.Date(Date), "%d-%m-%Y")) %>%
mutate(Date = as.character(Date))
final_data_2023 <- final_data_2023 %>%
arrange(Date, match(Plot, c("701", "711", "805", "812", "903", "909"))) %>%
#mutate(Date = format(as.Date(Date), "%d-%m-%Y")) %>%
mutate(Date = as.character(Date))
final_data_rearranged <- rbind(final_data_2021, before_11_may_2022, after_11_may_2022, final_data_2023)
write.xlsx(final_data_rearranged, file = "AllFieldMeasurementsWrangled_Allrevised_Jerry_Zhang_DoNotEdit_RCalibrated.xlsx", sheetName = "Yay_Hopefully", rowNames = FALSE)
final_data <- read_excel("D:/Academics/UC Davis/School Work/Linquist Lab/Data/R stats/GHG and MAOM POM/Calibration_Curves/AllFieldMeasurementsWrangled_Allrevised_Jerry_Zhang_DoNotEdit.xlsx", sheet = 1)
final_data$Date <- as.POSIXct(final_data$Date)
final_data_2021 <- final_data %>%
filter(year(Date) == 2021)
final_data_2022 <- final_data %>%
filter(year(Date) == 2022)
#this is becuase the plots coming out of winter are in a different sequence than those going into summer
split_date <- as.Date("2022-05-13")
before_11_may_2022 <- final_data_2022 %>% filter(Date < split_date)
after_11_may_2022 <- final_data_2022 %>% filter(Date > split_date)
final_data_2023 <-final_data %>%
filter(year(Date) == 2023)
final_data_2021 <- final_data_2021 %>%
arrange(Date, match(Plot, c("106", "107","204","209","302","307","402","505","601"))) %>%
#mutate(Date = format(as.Date(Date), "%d-%m-%Y")) %>%
mutate(Date = as.character(Date))
before_11_may_2022 <- before_11_may_2022 %>%
arrange(Date, match(Plot, c("106", "107","204","209","302","307","402","505","601"))) %>%
#mutate(Date = format(as.Date(Date), "%d-%m-%Y")) %>%
mutate(Date = as.character(Date))
after_11_may_2022 <- after_11_may_2022 %>%
arrange(Date, match(Plot, c("402", "409", "505", "512", "601", "608","209","307","K1"))) %>%
#mutate(Date = format(as.Date(Date), "%d-%m-%Y")) %>%
mutate(Date = as.character(Date))
final_data_2023 <- final_data_2023 %>%
arrange(Date, match(Plot, c("701", "711", "805", "812", "903", "909"))) %>%
#mutate(Date = format(as.Date(Date), "%d-%m-%Y")) %>%
mutate(Date = as.character(Date))
final_data_rearranged <- rbind(final_data_2021, before_11_may_2022, after_11_may_2022, final_data_2023)
write.xlsx(final_data_rearranged, file = "AllFieldMeasurementsWrangled_Allrevised_Jerry_Zhang_DoNotEdit.xlsx", sheetName = "Yay_Hopefully", rowNames = FALSE)
library(knitr)
library(ggplot2)
theme_set(theme_bw())
library(emmeans)
library(multcomp)
library(PLS205)
library(lme4)
library(lmerTest)
library(multcompView)
library(car)
library(Rmisc)
library(dplyr) #https://r4ds.had.co.nz/ (Chapter 3, Chapter 5, look at filter and select)
# https://bookdown.org/ansellbr/WEHI_tidyR_course_book/
library(stringr)
library(data.table)
library(GGally)
library(formatR)
library(readxl)
library(lubridate)
library(openxlsx)
library(Peak2PPM)
std <- read_excel("D:/Academics/UC Davis/School Work/Linquist Lab/Data/R stats/GHG and MAOM POM/Calibration_Curves/Std_Input_Zhang.xlsx", sheet = 1)
samples <- read_excel("D:/Academics/UC Davis/School Work/Linquist Lab/Data/R stats/GHG and MAOM POM/Calibration_Curves/AllFieldMeasurementsWrangled_Allrevised_Jerry_Zhang_DoNotEdit.xlsx", sheet = 1)
str(samples)
str(std)
table(samples$GC_Run)
table(std$GC_Run)
final_data <- peak2ppm(std, samples)
str(final_data)
final_data <- final_data %>%
select(-Sample_Gas3_ppm,
-Sample_Gas3_Peak,
-Sample_Gas2_ppm,
-Sample_Gas2_Peak,
-Sample_Gas1_ppm,
-Sample_Gas1_Peak,
-Sample_CO2_ppm,
-Sample_CO2_Peak,
-Peak_Area_CH4,
-Peak_Area_N2O,
-Conc_PPM_CH4,
-Conc_PPM_N2O)
final_data$Date <- as.POSIXct(final_data$Date)
final_data_2021 <- final_data %>%
filter(year(Date) == 2021)
final_data_2022 <- final_data %>%
filter(year(Date) == 2022)
#this is becuase the plots coming out of winter are in a different sequence than those going into summer
split_date <- as.Date("2022-05-13")
before_11_may_2022 <- final_data_2022 %>% filter(Date < split_date)
after_11_may_2022 <- final_data_2022 %>% filter(Date > split_date)
final_data_2023 <-final_data %>%
filter(year(Date) == 2023)
final_data_2021 <- final_data_2021 %>%
arrange(Date, match(Plot, c("106", "107","204","209","302","307","402","505","601"))) %>%
#mutate(Date = format(as.Date(Date), "%d-%m-%Y")) %>%
mutate(Date = as.character(Date))
before_11_may_2022 <- before_11_may_2022 %>%
arrange(Date, match(Plot, c("106", "107","204","209","302","307","402","505","601"))) %>%
#mutate(Date = format(as.Date(Date), "%d-%m-%Y")) %>%
mutate(Date = as.character(Date))
after_11_may_2022 <- after_11_may_2022 %>%
arrange(Date, match(Plot, c("402", "409", "505", "512", "601", "608","209","307","K1"))) %>%
#mutate(Date = format(as.Date(Date), "%d-%m-%Y")) %>%
mutate(Date = as.character(Date))
final_data_2023 <- final_data_2023 %>%
arrange(Date, match(Plot, c("701", "711", "805", "812", "903", "909"))) %>%
#mutate(Date = format(as.Date(Date), "%d-%m-%Y")) %>%
mutate(Date = as.character(Date))
final_data_rearranged <- rbind(final_data_2021, before_11_may_2022, after_11_may_2022, final_data_2023)
write.xlsx(final_data_rearranged, file = "AllFieldMeasurementsWrangled_Allrevised_Jerry_Zhang_DoNotEdit_RCalibrated.xlsx", sheetName = "Yay_Hopefully", rowNames = FALSE)
